// Script de prueba para endpoints HTTP del m√≥dulo categor√≠as
// Ejecutar: node test-endpoints-categorias.js

const http = require('http');

const BASE_URL = 'localhost';
const PORT = 3000;
let adminToken = '';
let categoriaId = null;

// Funci√≥n para hacer peticiones HTTP
function makeRequest(path, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const postData = data ? JSON.stringify(data) : null;
    
    const options = {
      hostname: BASE_URL,
      port: PORT,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    if (postData) {
      options.headers['Content-Length'] = Buffer.byteLength(postData);
    }

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsedData = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsedData });
        } catch (error) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', (error) => {
      resolve({ status: 'ERROR', data: { error: error.message } });
    });

    if (postData) {
      req.write(postData);
    }
    
    req.end();
  });
}

// Funci√≥n para mostrar resultados
function showResult(testName, result) {
  console.log(`\n${testName}:`);
  console.log(`Status: ${result.status}`);
  console.log('Response:', JSON.stringify(result.data, null, 2));
  console.log('‚îÄ'.repeat(50));
}

async function testEndpoints() {
  console.log('üß™ Probando endpoints del m√≥dulo Categor√≠as...\n');

  // 1. Verificar servidor
  console.log('1Ô∏è‚É£ Verificando servidor...');
  const serverTest = await makeRequest('/');
  showResult('Servidor', serverTest);

  // 2. Obtener todas las categor√≠as (p√∫blico)
  console.log('2Ô∏è‚É£ Obteniendo todas las categor√≠as...');
  const allCategoriesResult = await makeRequest('/api/categorias');
  showResult('Todas las Categor√≠as', allCategoriesResult);

  // 3. Obtener categor√≠as con conteo (p√∫blico)
  console.log('3Ô∏è‚É£ Obteniendo categor√≠as con conteo...');
  const categoriesWithCountResult = await makeRequest('/api/categorias/con-conteo');
  showResult('Categor√≠as con Conteo', categoriesWithCountResult);

  // 4. Crear usuario administrador para pruebas
  console.log('4Ô∏è‚É£ Creando usuario administrador...');
  const timestamp = Date.now();
  const adminData = {
    nombre_usuario: `admin_cat_${timestamp}`,
    email: `admin_cat_${timestamp}@gardem.com`,
    contrase√±a: 'admin123',
    rol: 'Administrador'
  };

  const adminRegisterResult = await makeRequest('/api/usuarios/registrar', 'POST', adminData);
  showResult('Registro Admin', adminRegisterResult);

  if (adminRegisterResult.status === 201) {
    adminToken = adminRegisterResult.data.token;
    console.log(`‚úÖ Token Admin: ${adminToken.substring(0, 50)}...`);
  }

  // 5. Crear nueva categor√≠a (requiere admin)
  console.log('5Ô∏è‚É£ Creando nueva categor√≠a...');
  const categoryData = {
    nombre: `Categor√≠a Test ${timestamp}`,
    descripcion: 'Descripci√≥n de prueba para la categor√≠a',
    activa: true
  };

  const createCategoryResult = await makeRequest('/api/categorias', 'POST', categoryData, {
    'Authorization': `Bearer ${adminToken}`
  });
  showResult('Crear Categor√≠a', createCategoryResult);

  if (createCategoryResult.status === 201) {
    categoriaId = createCategoryResult.data.categoria.id_categoria;
    console.log(`‚úÖ Categor√≠a creada con ID: ${categoriaId}`);
  }

  // 6. Obtener categor√≠a por ID (p√∫blico)
  console.log('6Ô∏è‚É£ Obteniendo categor√≠a por ID...');
  const getCategoryResult = await makeRequest(`/api/categorias/${categoriaId}`);
  showResult('Obtener Categor√≠a por ID', getCategoryResult);

  // 7. Actualizar categor√≠a (requiere admin)
  console.log('7Ô∏è‚É£ Actualizando categor√≠a...');
  const updateData = {
    nombre: `Categor√≠a Actualizada ${timestamp}`,
    descripcion: 'Descripci√≥n actualizada'
  };

  const updateCategoryResult = await makeRequest(`/api/categorias/${categoriaId}`, 'PUT', updateData, {
    'Authorization': `Bearer ${adminToken}`
  });
  showResult('Actualizar Categor√≠a', updateCategoryResult);

  // 8. Probar acceso sin token (debe fallar)
  console.log('8Ô∏è‚É£ Probando acceso sin token...');
  const noTokenResult = await makeRequest('/api/categorias', 'POST', categoryData);
  showResult('Sin Token', noTokenResult);

  // 9. Probar token inv√°lido (debe fallar)
  console.log('9Ô∏è‚É£ Probando token inv√°lido...');
  const invalidTokenResult = await makeRequest('/api/categorias', 'POST', categoryData, {
    'Authorization': 'Bearer token_invalido'
  });
  showResult('Token Inv√°lido', invalidTokenResult);

  // 10. Crear usuario normal para probar acceso denegado
  console.log('üîü Creando usuario normal...');
  const normalUserData = {
    nombre_usuario: `user_cat_${timestamp}`,
    email: `user_cat_${timestamp}@gardem.com`,
    contrase√±a: 'user123',
    rol: 'Cliente'
  };

  const userRegisterResult = await makeRequest('/api/usuarios/registrar', 'POST', normalUserData);
  showResult('Registro Usuario Normal', userRegisterResult);

  let userToken = '';
  if (userRegisterResult.status === 201) {
    userToken = userRegisterResult.data.token;
    console.log(`‚úÖ Token Usuario: ${userToken.substring(0, 50)}...`);
  }

  // 11. Probar acceso con usuario normal (debe fallar)
  console.log('1Ô∏è‚É£1Ô∏è‚É£ Probando acceso con usuario normal...');
  const normalUserAccessResult = await makeRequest('/api/categorias', 'POST', categoryData, {
    'Authorization': `Bearer ${userToken}`
  });
  showResult('Usuario Normal Accediendo Admin', normalUserAccessResult);

  // 12. Eliminar categor√≠a (requiere admin)
  console.log('1Ô∏è‚É£2Ô∏è‚É£ Eliminando categor√≠a...');
  const deleteCategoryResult = await makeRequest(`/api/categorias/${categoriaId}`, 'DELETE', null, {
    'Authorization': `Bearer ${adminToken}`
  });
  showResult('Eliminar Categor√≠a', deleteCategoryResult);

  // 13. Verificar que la categor√≠a fue eliminada
  console.log('1Ô∏è‚É£3Ô∏è‚É£ Verificando que la categor√≠a fue eliminada...');
  const verifyDeleteResult = await makeRequest(`/api/categorias/${categoriaId}`);
  showResult('Verificar Eliminaci√≥n', verifyDeleteResult);

  // 14. Limpiar - eliminar usuarios de prueba
  console.log('1Ô∏è‚É£4Ô∏è‚É£ Limpiando datos de prueba...');
  if (adminToken) {
    await makeRequest(`/api/usuarios/${adminRegisterResult.data.usuario.id_usuario}`, 'DELETE', null, {
      'Authorization': `Bearer ${adminToken}`
    });
    console.log('‚úÖ Usuario admin eliminado');
  }

  console.log('\nüéâ ¬°Pruebas completadas!');
  console.log('\nüìä Resumen:');
  console.log('- Endpoints p√∫blicos: ‚úÖ');
  console.log('- Autenticaci√≥n JWT: ‚úÖ');
  console.log('- Autorizaci√≥n por roles: ‚úÖ');
  console.log('- CRUD de categor√≠as: ‚úÖ');
  console.log('- Validaciones: ‚úÖ');
  console.log('- Manejo de errores: ‚úÖ');
}

// Funci√≥n para verificar que el servidor est√© funcionando
async function verificarServidor() {
  try {
    console.log('üîç Verificando que el servidor est√© funcionando...');
    const respuesta = await makeRequest('/health');
    console.log('‚úÖ Servidor funcionando:', respuesta.data);
    console.log('');
    return true;
  } catch (error) {
    console.error('‚ùå El servidor no est√° funcionando. Inicia el servidor con:');
    console.error('   node src/app.js');
    console.error('   o');
    console.error('   npm run dev');
    return false;
  }
}

// Funci√≥n principal
async function main() {
  const servidorOk = await verificarServidor();
  if (servidorOk) {
    await testEndpoints();
  }
}

// Ejecutar las pruebas
main().catch(console.error); 